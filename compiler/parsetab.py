
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN CONST DIVIDE DO ELSE END EQUAL GREATER GREATEREQUAL IDENTIFIER IF LESS LESSEQUAL MINUS MODULO NOTEQUAL NUMBER PLUS READ SEMICOLON THEN TIMES VAR WHILE WRITEprogram : CONST cdeclarations VAR vdeclarations BEGIN commands ENDcdeclarations : cdeclarations : cdeclarations IDENTIFIER ASSIGN NUMBERvdeclarations : vdeclarations : vdeclarations IDENTIFIERcommands : commands commandcommands : commandcommand : IDENTIFIER ASSIGN expression SEMICOLONcommand : IF condition THEN commands ELSE commands ENDcommand : WHILE condition DO commands ENDcommand : READ IDENTIFIER SEMICOLONcommand : WRITE IDENTIFIER SEMICOLONexpression : NUMBERexpression : IDENTIFIERexpression : IDENTIFIER PLUS IDENTIFIERexpression : IDENTIFIER MINUS IDENTIFIERexpression : IDENTIFIER TIMES IDENTIFIERexpression : IDENTIFIER DIVIDE IDENTIFIERexpression : IDENTIFIER MODULO IDENTIFIERcondition : IDENTIFIER EQUAL IDENTIFIER\n                 | IDENTIFIER NOTEQUAL IDENTIFIER\n                 | IDENTIFIER LESS IDENTIFIER\n                 | IDENTIFIER GREATER IDENTIFIER\n                 | IDENTIFIER LESSEQUAL IDENTIFIER\n                 | IDENTIFIER GREATEREQUAL IDENTIFIER'
    
_lr_action_items = {'CONST':([0,],[2,]),'$end':([1,18,],[0,-1,]),'VAR':([2,3,10,],[-2,4,-3,]),'IDENTIFIER':([2,3,4,6,8,9,10,11,12,14,15,16,17,19,20,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,52,58,59,60,61,],[-2,5,-4,9,13,-5,-3,13,-7,22,22,24,25,-6,26,13,46,47,48,49,50,51,13,-11,-12,53,54,55,56,57,-8,13,13,13,-10,13,-9,]),'BEGIN':([4,6,9,],[-4,8,-5,]),'ASSIGN':([5,13,],[7,20,]),'NUMBER':([7,20,],[10,28,]),'IF':([8,11,12,19,29,36,37,38,44,45,52,58,59,60,61,],[14,14,-7,-6,14,14,-11,-12,-8,14,14,14,-10,14,-9,]),'WHILE':([8,11,12,19,29,36,37,38,44,45,52,58,59,60,61,],[15,15,-7,-6,15,15,-11,-12,-8,15,15,15,-10,15,-9,]),'READ':([8,11,12,19,29,36,37,38,44,45,52,58,59,60,61,],[16,16,-7,-6,16,16,-11,-12,-8,16,16,16,-10,16,-9,]),'WRITE':([8,11,12,19,29,36,37,38,44,45,52,58,59,60,61,],[17,17,-7,-6,17,17,-11,-12,-8,17,17,17,-10,17,-9,]),'END':([11,12,19,37,38,44,52,59,60,61,],[18,-7,-6,-11,-12,-8,59,-10,61,-9,]),'ELSE':([12,19,37,38,44,45,59,61,],[-7,-6,-11,-12,-8,58,-10,-9,]),'THEN':([21,46,47,48,49,50,51,],[29,-20,-21,-22,-23,-24,-25,]),'EQUAL':([22,],[30,]),'NOTEQUAL':([22,],[31,]),'LESS':([22,],[32,]),'GREATER':([22,],[33,]),'LESSEQUAL':([22,],[34,]),'GREATEREQUAL':([22,],[35,]),'DO':([23,46,47,48,49,50,51,],[36,-20,-21,-22,-23,-24,-25,]),'SEMICOLON':([24,25,26,27,28,53,54,55,56,57,],[37,38,-14,44,-13,-15,-16,-17,-18,-19,]),'PLUS':([26,],[39,]),'MINUS':([26,],[40,]),'TIMES':([26,],[41,]),'DIVIDE':([26,],[42,]),'MODULO':([26,],[43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'cdeclarations':([2,],[3,]),'vdeclarations':([4,],[6,]),'commands':([8,29,36,58,],[11,45,52,60,]),'command':([8,11,29,36,45,52,58,60,],[12,19,12,12,19,19,12,19,]),'condition':([14,15,],[21,23,]),'expression':([20,],[27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> CONST cdeclarations VAR vdeclarations BEGIN commands END','program',7,'p_program','parser.py',85),
  ('cdeclarations -> <empty>','cdeclarations',0,'p_cdeclarations_empty','parser.py',90),
  ('cdeclarations -> cdeclarations IDENTIFIER ASSIGN NUMBER','cdeclarations',4,'p_cdeclarations','parser.py',95),
  ('vdeclarations -> <empty>','vdeclarations',0,'p_vdeclarations_empty','parser.py',100),
  ('vdeclarations -> vdeclarations IDENTIFIER','vdeclarations',2,'p_vdeclarations','parser.py',105),
  ('commands -> commands command','commands',2,'p_commands_multiple','parser.py',110),
  ('commands -> command','commands',1,'p_commands_single','parser.py',115),
  ('command -> IDENTIFIER ASSIGN expression SEMICOLON','command',4,'p_command_assignment','parser.py',120),
  ('command -> IF condition THEN commands ELSE commands END','command',7,'p_command_if','parser.py',125),
  ('command -> WHILE condition DO commands END','command',5,'p_command_while','parser.py',130),
  ('command -> READ IDENTIFIER SEMICOLON','command',3,'p_command_read','parser.py',135),
  ('command -> WRITE IDENTIFIER SEMICOLON','command',3,'p_command_write','parser.py',140),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',145),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',150),
  ('expression -> IDENTIFIER PLUS IDENTIFIER','expression',3,'p_expression_plus','parser.py',155),
  ('expression -> IDENTIFIER MINUS IDENTIFIER','expression',3,'p_expression_minus','parser.py',160),
  ('expression -> IDENTIFIER TIMES IDENTIFIER','expression',3,'p_expression_times','parser.py',165),
  ('expression -> IDENTIFIER DIVIDE IDENTIFIER','expression',3,'p_expression_divide','parser.py',170),
  ('expression -> IDENTIFIER MODULO IDENTIFIER','expression',3,'p_expression_modulo','parser.py',175),
  ('condition -> IDENTIFIER EQUAL IDENTIFIER','condition',3,'p_condition','parser.py',180),
  ('condition -> IDENTIFIER NOTEQUAL IDENTIFIER','condition',3,'p_condition','parser.py',181),
  ('condition -> IDENTIFIER LESS IDENTIFIER','condition',3,'p_condition','parser.py',182),
  ('condition -> IDENTIFIER GREATER IDENTIFIER','condition',3,'p_condition','parser.py',183),
  ('condition -> IDENTIFIER LESSEQUAL IDENTIFIER','condition',3,'p_condition','parser.py',184),
  ('condition -> IDENTIFIER GREATEREQUAL IDENTIFIER','condition',3,'p_condition','parser.py',185),
]
